// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesforceAPI.Data;

#nullable disable

namespace SalesforceAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240726111107_audit")]
    partial class audit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalesforceAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SalesforceAPI.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SalesforceAPI.Models.CredentialingContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactPersonRole")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PrimaryContact")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CredentialingContacts");
                });

            modelBuilder.Entity("SalesforceAPI.Models.DirectService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsCertification")
                        .HasColumnType("bit");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectServices");
                });

            modelBuilder.Entity("SalesforceAPI.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CollegeUniversityProgramAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollegeUniversityProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialingProfileID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("SalesforceAPI.Models.HospitalAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryofMembership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateofAffiliation")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalAffiliationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalAffiliationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDateofAffiliation")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("HospitalAffiliations");
                });

            modelBuilder.Entity("SalesforceAPI.Models.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("SalesforceAPI.Models.OrganizationalCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AccreditationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AccreditationStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AccreditingBody")
                        .HasColumnType("int");

                    b.Property<int?>("Actionpendingcurrentaccreditation")
                        .HasColumnType("int");

                    b.Property<int?>("Actionpendingorglicense")
                        .HasColumnType("int");

                    b.Property<string>("Attestationbytheapplicantofthecorr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Canyouperformtheessentialdutiesof")
                        .HasColumnType("int");

                    b.Property<bool?>("CertificateofLiability")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CertificateofLiabilityExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CommercialLiability")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CommercialLiabilityExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturalCompetences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CulturalCompetenciesPicklist")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentMalpracticeInsuranceCoverage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CyberLiabilityExpirationifapplicable")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CyberLiabilityStatusifapplicable")
                        .HasColumnType("int");

                    b.Property<bool?>("CyberLiabilityifapplicable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisclosureFormExpiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisclosureFormStatus")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationHistoryoffelonyconvictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationcurrentaccreditation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationfiveyearhistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Explanationorgaccreditationlimited")
                        .HasColumnType("int");

                    b.Property<string>("ExplanationorgdefendantSUDpayment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationorginsuranceinitiallyrefused")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationorglicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationorgmalpracticeclaimsSUD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationorgmedicaidsanctions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanationorgmedicaresanctions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Fiveyearhistoryorgliability")
                        .HasColumnType("int");

                    b.Property<string>("Historyoffelonyconvictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Historyoflossoflicense")
                        .HasColumnType("int");

                    b.Property<string>("Historyoflossorlimitationsofprivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressZipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lackofpresentillegaldruguse")
                        .HasColumnType("int");

                    b.Property<string>("LanguagesSpoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MedicareNumber")
                        .HasColumnType("bigint");

                    b.Property<bool?>("MedicareProvider")
                        .HasColumnType("bit");

                    b.Property<string>("NPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressZipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Orgaccreditationlimited")
                        .HasColumnType("int");

                    b.Property<int?>("OrgdefendantSUDpayment")
                        .HasColumnType("int");

                    b.Property<int?>("Orginsuranceinitiallyrefused")
                        .HasColumnType("int");

                    b.Property<int?>("OrgmalpracticeclaimsSUD")
                        .HasColumnType("int");

                    b.Property<int?>("Orgmedicaidsanctions")
                        .HasColumnType("int");

                    b.Property<int?>("Orgmedicaresanctions")
                        .HasColumnType("int");

                    b.Property<string>("OtherSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PleaseacknowledgeIfdeniedcredential")
                        .HasColumnType("bit");

                    b.Property<bool?>("Pleaseindicateifyouhaveaspeciality")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProfessionalLiabilityExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ProofofAccreditation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProofofAccreditationExpiration")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ProofofAccreditationStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("Specialties")
                        .HasColumnType("int");

                    b.Property<long?>("TaxID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("W9Expiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("W9Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Whenwasthelastaccreditationsurvey")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkersCompensationExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("X6MonthGapActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("X6MonthGapEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("X6MonthGapReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("X6MonthGapStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("X6monthgapinemploymentsinceprofess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrganizationalCredentialingProfiles");
                });

            modelBuilder.Entity("SalesforceAPI.Models.OrganizationalPSV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Atleastfiveyearhistoryoforganizati")
                        .HasColumnType("bit");

                    b.Property<bool?>("CVO")
                        .HasColumnType("bit");

                    b.Property<string>("CredentialingProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Disciplinarystatuswithregulatoryboar")
                        .HasColumnType("bit");

                    b.Property<int?>("LARALicense")
                        .HasColumnType("int");

                    b.Property<bool?>("LARAUploaded")
                        .HasColumnType("bit");

                    b.Property<bool?>("MDHHSSanctionedProviderCheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("OfficeofInspectorGeneralCheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("OnSiteQualityAssessmentRecredential")
                        .HasColumnType("bit");

                    b.Property<string>("OtherAccred")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimarySourceVerifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ProofofAccreditation")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<bool?>("SAMgovCheck")
                        .HasColumnType("bit");

                    b.Property<int?>("VerifiersCredentialingOrganization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrganizationalPrimarySourceVerifications");
                });

            modelBuilder.Entity("SalesforceAPI.Models.PGMedicalTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTrainingHospitalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTrainingHospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalTrainingType")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TrainingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrainingStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PostGraduateMedicalTrainings");
                });

            modelBuilder.Entity("SalesforceAPI.Models.PractitionerCP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attestationbytheapplicantofthecorr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Canyouperformtheessentialdutiesof")
                        .HasColumnType("int");

                    b.Property<bool?>("CertificateofLiability")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CertificateofLiabilityExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturalCompetences")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CulturalCompetenciesPicklist")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentMalpracticeInsuranceCoverage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExplanationCurrentMalpractice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationHistoryoffelonyconvictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationHistoryofloss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationHistoryoflossoflicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExplanationLackofpresentillegaldrug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Fiveyearworkhistory")
                        .HasColumnType("bit");

                    b.Property<string>("Historyoffelonyconvictions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Historyoflossoflicense")
                        .HasColumnType("int");

                    b.Property<string>("Historyoflossorlimitationsofprivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddressZipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Lackofpresentillegaldruguse")
                        .HasColumnType("int");

                    b.Property<string>("LanguagesSpoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MalpracticeInsuranceCoverageExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("MalpracticeInsuranceCoverageStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MedicareNumber")
                        .HasColumnType("bigint");

                    b.Property<bool?>("MedicareProvider")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressStreet1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeAddressZipcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PleaseacknowledgeIfdeniedcredential")
                        .HasColumnType("bit");

                    b.Property<string>("PractitionerNPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Reasonforinabilitytoperformessentia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Specialties")
                        .HasColumnType("int");

                    b.Property<long?>("TaxID")
                        .HasColumnType("bigint");

                    b.Property<string>("X6MonthGapActivity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("X6MonthGapEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("X6MonthGapReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("X6MonthGapStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("X6monthgapinemploymentsinceprofess")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PractitionerCredentialingProfiles");
                });

            modelBuilder.Entity("SalesforceAPI.Models.PractitionerLC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("FileUploaded")
                        .HasColumnType("bit");

                    b.Property<int?>("LicenseCertificationStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseCertificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LicenseTypesLARA")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("RecordTypeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PractitionerLicensesCertifications");
                });

            modelBuilder.Entity("SalesforceAPI.Models.PractitionerPSV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AMAVerification")
                        .HasColumnType("bit");

                    b.Property<bool?>("AOAVerification")
                        .HasColumnType("bit");

                    b.Property<bool?>("CVO")
                        .HasColumnType("bit");

                    b.Property<string>("CredentialingProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DegreeVerification")
                        .HasColumnType("bit");

                    b.Property<bool?>("ECFMG")
                        .HasColumnType("bit");

                    b.Property<bool?>("IchatBackgroundheck")
                        .HasColumnType("bit");

                    b.Property<int?>("LARALicense")
                        .HasColumnType("int");

                    b.Property<bool?>("LARAUploaded")
                        .HasColumnType("bit");

                    b.Property<bool?>("MCBAPVerification")
                        .HasColumnType("bit");

                    b.Property<bool?>("MDHHSSanctionedProviderheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("MIPublicSexOffenderRegistryheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicareBaseEnrollment")
                        .HasColumnType("bit");

                    b.Property<bool?>("MedicareOptOut")
                        .HasColumnType("bit");

                    b.Property<bool?>("NationalSexOffenderRegistryheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("OfficeofInspectorGeneralheck")
                        .HasColumnType("bit");

                    b.Property<bool?>("OfficialTranscriptfromAccreditedScho")
                        .HasColumnType("bit");

                    b.Property<string>("OtherAccred")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimarySourceVerifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<bool?>("SAMgovheck")
                        .HasColumnType("bit");

                    b.Property<int?>("VerifiersredentialingOrganization")
                        .HasColumnType("int");

                    b.Property<bool?>("WorkforceBackgroundheck")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PractitionerPrimarySourceVerifications");
                });

            modelBuilder.Entity("SalesforceAPI.Models.ProviderKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncompassID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PractitionerGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProviderKeys");
                });

            modelBuilder.Entity("SalesforceAPI.Models.ServiceLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccomodationsAccessibility")
                        .HasColumnType("int");

                    b.Property<string>("AccomodationsAccessibilityOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FacilityLicenseExpirationifapplicab")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacilityLicenseNumberifapplicable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacilityLicenseStatusifapplicable")
                        .HasColumnType("int");

                    b.Property<bool?>("FacilityLicenseifapplicable")
                        .HasColumnType("bit");

                    b.Property<string>("HoursofOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LicensedFacility")
                        .HasColumnType("bit");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServiceLocations");
                });

            modelBuilder.Entity("SalesforceAPI.Models.ServiceLocationLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CredentialingProfileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServiceLicenseExpirationifapplicabl")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceLicenseNumberifapplicable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceLicenseStatusifapplicable")
                        .HasColumnType("int");

                    b.Property<string>("ServiceLocations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceLocationLicenses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SalesforceAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SalesforceAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesforceAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SalesforceAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
